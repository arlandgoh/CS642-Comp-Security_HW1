In the target 3 we have a integer overflow vulnerability. The bug is on the condition controlling the function "memcpy". This condition checks whether the count is less than the maximum number of widgets allowed, if so, the program copy this number of widgets into the buffer. This condition is exploitable because count is an integer of 32 bytes, so, assigning it's value with a large negative number,  he will pass through the condition and when multiplied by 20(size of the struct) the result will be a positive value that can be larger than the size of the buffer.
We have a buffer of size 4800 = 20(size of the struct) * 240 ( max number of widgets), so in my attack I have to determine a negative value that when multiplied by 20 will be bigger than 4800.
In my attack, I set up a buffer of size 4820, so I have enough space to overwrite the target buffer of size 4800 and the value of EIP on the stack.
First, I filled my buffer with NOP's, than I copy into it the count value of 2147483889. I choose this value because it will be casted from a unsigned long integer on the function strloul to a negative signed integer of value -2147483407. This value will pass through the "memcpy" controlling condition in C, and when multiplied by 20, will be truncated to a positive value of 4820, that is exactly my attack buffer size.
Later, I follow the standard process of a buffer overflow,  putting my shellcode into the buffer and the buffer address on a way it overwrites EIP.
