In the target 4 the char pointer "q" is freed twice resulting in a double free vulnerability. Since the pointer p is reallocated with a size of 1024 and the content provided by the user is copied into it we can overwrite q with any value we desire. The tmalloc library keeps track of chunks of memory in a list in which each chunk having a pointer to the chunk located on it’s left and right, when a "chunk" is freed the pointer are adjusted. Analyzing the tfree function we realize that if we overwrite the q->left value with the address of malicious buffer and q-> right with the stored EIP address we can effectively overwrite EIP with our malicious buffer address.
In my attack , I filled my buffer with NOP's, later I copy into it a instruction code(\xeb\x06) to jump into my shellcode. Later I put on the attack buffer a fake_right value for p, so we’ll pass on the condition "q != NULL && GET_FREEBIT(q)" in tfree. After that  I copy my shellcode into the buffer and overwite the q left value with p address( that will contain my shellcode), and q right value with EIP.
I figure out the value 200 by subtracting the Q pointer address value of 0x08059948 by the P pointer address value of 0x09059878.
